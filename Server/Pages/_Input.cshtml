@using Microsoft.AspNetCore.Mvc.Razor
@model Input

@{
    void AccordionTitle(string name, bool startOpened, ExecutionStatus status)
    {
        <button class="w-full text-left p-2 flex justify-between items-center @status.ToTailwindColor()" onclick="toggleAccordion(this)">
            <span class="text-sm font-semibold">@name</span>
            <svg class="w-4 h-4 transform transition-transform duration-200 @(startOpened ? "rotate-180" : "")" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
        </button>
    }

    void AccordionRow(string caption, Func<object, HelperResult> content, bool startOpened)
    {
        <div class="border-t">
            <button class="w-full text-left p-2 flex justify-between items-center" onclick="toggleAccordion(this)">
                <span class="text-xs">@caption</span>
                <svg class="w-3 h-3 transform transition-transform duration-200 @(startOpened ? "rotate-180" : "")" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
            </button>
            <div class="@(startOpened ? "" : "hidden")">
                <div class="text-xs p-2 bg-gray-50 json-cell">
                    @content(null!)
                </div>
            </div>
        </div>
    }
    
    void EmitUnit(string name, bool startsOpened, Func<object, HelperResult> content, ExecutionStatus status, string? deleteButtonAttributes)
    {
        <div class="flex items-start m-4">
            <div class="border rounded-lg flex-grow-1">
                <div>
                    @{ AccordionTitle(name, startsOpened, status); }
                    <div class="@(startsOpened ? "" : "hidden")">
                        @content(null!)
                    </div>
                </div>
            </div>
            @{
                if (deleteButtonAttributes != null)
                {
                    <a class="bg-red-500 mx-3 px-1 rounded hover:bg-red-600 transition-colors" @Html.Raw(deleteButtonAttributes)>X</a>                    
                }
            }
        </div>
    }

    void EmitOutput(string name, Output output, bool firstRowStartsOpened, bool outputStartsOpened)
    {
        void BodyForOutput()
        {
            var isFirst = true;
            foreach (var component in output.Components.PutResultFirst())
            {
                AccordionRow(component.Name, @<text>@component.Value</text>, isFirst && firstRowStartsOpened);
                isFirst = false;
            }
        }
        <turbo-frame id="output_@output.Id">
            @{
                EmitUnit(name, outputStartsOpened, @<div>
                                                       @{ BodyForOutput(); }
                                                   </div>, output.Status, 
                    $"href=\"/api/output/{output.Id}\" data-turbo-method=\"DELETE\" data-turbo-confirm=\"Are you sure you want to delete this?\"");
            }
        </turbo-frame>
    }

    void EmitInputComponents(Input input)
    {
        void EmitBody()
        {
            foreach (var inputString in input.Strings)
            {
                AccordionRow(inputString.Name, @<text>@inputString.Value</text>, true );
            }
            foreach (var inputFile in input.Files)
            {
                AccordionRow(inputFile.Name, @<img src="/images/@inputFile.InputId/@inputFile.Index"/>, true);
            }
        }
        
        EmitUnit("Input", false, @<div>@{EmitBody();}</div>, ExecutionStatus.Completed, null);
    }

    void Kruisje()
    {
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
    }

    void EmitTags(Input i)
    {
        <div class="flex flex-wrap gap-2 items-center m-4">
            <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded flex items-center">
                ManualEval
                <a href="/remove-tag?inputId=1&tag=AppliedTag1" class="ml-1 text-red-500 hover:text-red-700">
                    @{ Kruisje(); }
                </a>
            </span>
            <button onclick="openNewTagModal(1)" class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 transition-colors">
                Add Tag
            </button>
            <button onclick="openTriggerRunModal([@i.Id])" class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 transition-colors">
                Run
            </button>
        </div>
    }
}

<turbo-frame id="input_@Model.Id">
<div class="bg-white shadow rounded-md mb-12 overflow-hidden">
    @{
        bool first = true;
        foreach (var output in Model.Outputs.OrderByDescending(o => o.Execution.StartTime))
        {
            EmitOutput(output.Execution.Name ?? output.Execution.StartTime.HumanDate(), output, true, first);
            first = false;
        }

        EmitInputComponents(Model);
        EmitTags(Model);
    }
</div>
</turbo-frame>