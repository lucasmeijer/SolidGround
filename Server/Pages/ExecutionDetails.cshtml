@page "/Executions/{id:int}"
@model SolidGround.Pages.ExecutionDetailsModel

@{
    ViewData["Title"] = $"Execution Details";
    
    void EmitFilterBar()
    {
        <div class="bg-white rounded-lg shadow-md p-4 mb-6 sticky top-0 z-10">
            <div class="flex items-center space-x-4 overflow-x-auto scrollbar-hide">
                <input type="text" id="search" placeholder="Search items..." class="flex-grow p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <div class="flex space-x-2">
                    @foreach (var tag in Model.Tags)
                    {
                        <button class="tag-btn px-3 py-1 rounded-full text-sm font-medium @tag.TailwindStyle()">
                            @tag.Name
                        </button>    
                    }
                </div>
            </div>
        </div>
    }
    
}
<style>
    html {
        overflow-y: scroll;
    }
</style>

<div class="container mx-auto px-2 py-4 ">
    @{
        EmitFilterBar();
        
        foreach (var input in Model.Inputs)
        {
            @await Html.PartialAsync("_Input", input);
        }
    }
</div>

<!-- Modal for adding new tag (hidden by default) -->
<div id="newTagModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-2">Add New Tag</h3>
            <div class="mb-4">
                <select id="tagSelector" onchange="toggleNewTagInput()" class="w-full p-2 border rounded">
                    <option value="">Select existing tag or create new</option>
                    <option value="new">Create new tag</option>
                    <!-- Other options will be populated dynamically -->
                </select>
            </div>
            <div id="newTagInputContainer" class="mb-4 hidden">
                <input type="text" id="newTagName" placeholder="Enter new tag name" class="w-full p-2 border rounded">
            </div>
            <div class="flex justify-end space-x-2">
                <button onclick="closeNewTagModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
                    Close
                </button>
                <button onclick="addNewTag()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Add Tag
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Modal for triggering a run (hidden by default) -->
<div id="triggerRunModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-2">Trigger Run</h3>
            <p class="text-sm text-gray-500 mb-4">Run inputs</p>
            <div class="mb-4">
                <label for="endpointInput" class="block text-sm font-medium text-gray-700 mb-1">Endpoint (required)</label>
                <input type="text" id="endpointInput" placeholder="Enter endpoint" class="w-full p-2 border rounded" required>
            </div>
            <div class="mb-4">
                <label for="nameInput" class="block text-sm font-medium text-gray-700 mb-1">Name (optional)</label>
                <input type="text" id="nameInput" placeholder="Enter name" class="w-full p-2 border rounded">
            </div>
            <div class="flex justify-end space-x-2">
                <button onclick="closeTriggerRunModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
                    Cancel
                </button>
                <button onclick="triggerRun()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Run
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    function openTriggerRunModal(inputIds) {
        const modal = document.getElementById('triggerRunModal');
        modal.classList.remove('hidden');

        // Store the input IDs for later use
        modal.dataset.inputIds = JSON.stringify(inputIds);

        // Update the caption with the correct number of inputs
        const captionElement = modal.querySelector('p.text-sm.text-gray-500');
        captionElement.textContent = `Run ${inputIds.length} input${inputIds.length !== 1 ? 's' : ''}`;

        // Set up the cancel button
        //const cancelButton = modal.querySelector('button[onclick="closeTriggerRunModal()"]');
        //cancelButton.onclick = closeTriggerRunModal;

        // Set up the run button
        //const runButton = modal.querySelector('button[onclick="triggerRun()"]');
        //runButton.onclick = triggerRun;

        // Load the last used endpoint from localStorage
        const endpointInput = document.getElementById('endpointInput');
        const lastEndpoint = localStorage.getItem('lastEndpoint');
        if (lastEndpoint) {
            endpointInput.value = lastEndpoint;
        }
    }

    function closeTriggerRunModal() {
        const modal = document.getElementById('triggerRunModal');
        modal.classList.add('hidden');
        document.getElementById('nameInput').value = '';
    }

    function triggerRun() {
        const modal = document.getElementById('triggerRunModal');
        const endpoint = document.getElementById('endpointInput').value.trim();
        const name = document.getElementById('nameInput').value.trim();
        const inputIds = JSON.parse(modal.dataset.inputIds);

        if (!endpoint) {
            alert('Endpoint is required');
            return;
        }

        // Save the endpoint to localStorage
        localStorage.setItem('lastEndpoint', endpoint);

        const payload = {
            inputids: inputIds,
            endpoint: endpoint,
            name: name || undefined  // Only include name if it's not empty
        };

        fetch('/api/executions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                // Close the modal
                closeTriggerRunModal();
                // Refresh the page
                window.location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while triggering the run. Please try again.');
            });
    }
</script>


<script>

    function toggleAccordion(button) {
        const content = button.nextElementSibling;
        const icon = button.querySelector('svg');
        content.classList.toggle('hidden');
        icon.classList.toggle('rotate-180');
    }

</script>

<script>
    let currentInputId;

    function openNewTagModal(inputId) {
        currentInputId = inputId;
        document.getElementById('newTagModal').classList.remove('hidden');
        populateExistingTags(inputId);
    }

    function closeNewTagModal() {
        document.getElementById('newTagModal').classList.add('hidden');
        document.getElementById('tagSelector').value = '';
        document.getElementById('newTagName').value = '';
        document.getElementById('newTagInputContainer').classList.add('hidden');
    }

    function populateExistingTags(inputId) {
        // This function should be implemented to fetch and populate unapplied tags
        // For demonstration, we'll add some dummy options
        const select = document.getElementById('tagSelector');
        select.innerHTML = '<option value="">Select existing tag or create new</option><option value="new">Create new tag</option>';
        ['Unapplied Tag 1', 'Unapplied Tag 2', 'Unapplied Tag 3'].forEach(tag => {
            const option = document.createElement('option');
            option.value = tag;
            option.textContent = tag;
            select.appendChild(option);
        });
    }

    function toggleNewTagInput() {
        const selector = document.getElementById('tagSelector');
        const newTagInputContainer = document.getElementById('newTagInputContainer');
        if (selector.value === 'new') {
            newTagInputContainer.classList.remove('hidden');
        } else {
            newTagInputContainer.classList.add('hidden');
        }
    }

    function addNewTag() {
        const selector = document.getElementById('tagSelector');
        const newTagInput = document.getElementById('newTagName');
        let tagToAdd;

        if (selector.value === 'new') {
            tagToAdd = newTagInput.value.trim();
        } else {
            tagToAdd = selector.value;
        }

        if (tagToAdd) {
            fetch(`/api/inputs/${currentInputId}/tags`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ tagName: tagToAdd }),
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    console.error('Failed to add tag');
                }
            }).catch(error => {
                console.error('Error:', error);
            });
        }
        closeNewTagModal();
    }
</script>

<script>
    function deleteOutput(output_id) {
        // Show a confirmation dialog
        const isConfirmed = confirm("Are you sure you want to delete this output?");

        // If the user didn't confirm, exit the function
        if (!isConfirmed) {
            return;
        }

        // Construct the URL for the DELETE request
        const url = `/api/output/${output_id}`;

        // Send the DELETE request
        fetch(url, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                console.log('Output deleted successfully:', data);
                window.location.reload();
            })
            .catch(error => {
                console.error('Error deleting output:', error);
                alert('Error deleting output. Please try again.');
            });
    }
</script>

<style>
    .json-cell pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        word-break: break-word;
        width: 100%
    }
</style>
<script>
        function formatJson(jsonString) {
            try {
                // Parse and re-stringify to format
                const obj = JSON.parse(jsonString);
                const formatted = JSON.stringify(obj, null, 2);
                
                // Replace Unicode escape sequences
                const readable = formatted.replace(/\\u[\dA-F]{4}/gi, 
                    match => String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16)));
                
                return readable;
            } catch (e) {
                return jsonString; // Return original if not valid JSON
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const cells = document.querySelectorAll('.json-cell');
            cells.forEach(cell => {
                const formatted = formatJson(cell.textContent);
                if (formatted !== cell.textContent) {
                    cell.innerHTML = `<pre><code class="json">${formatted}</code></pre>`;
                    hljs.highlightElement(cell.querySelector('code'));
                }
            });
        });
    </script>