@page "/Executions/{id:int}"
@using Microsoft.AspNetCore.Mvc.Razor
@model SolidGround.Pages.ExecutionDetailsModel
@{
    ViewData["Title"] = $"Execution Details - {Model.Execution.Name}";

    ExecutionStatus StatusForAll()
    {
        if (Model.Execution.Outputs.All(o => o.Status == ExecutionStatus.Completed))
            return ExecutionStatus.Completed;
        return Model.Execution.Outputs.Any(o => o.Status == ExecutionStatus.Failed)
            ? ExecutionStatus.Failed
            : ExecutionStatus.Started;
    }

    var allStatus = StatusForAll();

    var executionBgColor = allStatus switch
    {
        ExecutionStatus.Completed => "bg-green-50",
        ExecutionStatus.Started => "bg-blue-50",
        ExecutionStatus.Failed => "bg-red-50",
        _ => throw new ArgumentOutOfRangeException()
    };

    void AccordionTitle(string name, bool startOpened)
    {
        <button class="w-full text-left p-2 flex justify-between items-center" onclick="toggleAccordion(this)">
            <span class="text-sm font-semibold">@name</span>
            <svg class="w-4 h-4 transform transition-transform duration-200 @(startOpened ? "rotate-180" : "")" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
        </button>
    }

    void AccordionRow(string caption, Func<object, HelperResult> content, bool startOpened)
    {
        <div class="border-t">
            <button class="w-full text-left p-2 flex justify-between items-center" onclick="toggleAccordion(this)">
                <span class="text-xs">@caption</span>
                <svg class="w-3 h-3 transform transition-transform duration-200 @(startOpened ? "rotate-180" : "")" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
            </button>
            <div class="@(startOpened ? "" : "hidden")">
                <div class="text-xs p-2 bg-gray-50">
                    @content(null!)
                </div>
            </div>
        </div>
    }
    
    void EmitOutput(string name, Output output, bool firstRowStartsOpened, bool outputStartsOpened)
    {
        <div class="border rounded-lg m-4">
            @{ AccordionTitle(name, outputStartsOpened); }
            <div class="@(outputStartsOpened ? "" : "hidden")">
                @{
                    var isFirst = true;
                    foreach (var component in output.Components)
                    {
                        AccordionRow(component.Name, @<text>@component.Value</text>, isFirst && firstRowStartsOpened);
                        isFirst = false;
                    }
                }
            </div>
        </div>
    }

    void EmitInput(Input input)
    {
        <div class="border rounded-lg m-4">
            @{ AccordionTitle("Input", false); }
            <div class="hidden">
                @foreach (var inputString in input.Strings)
                {
                    AccordionRow(inputString.Name, @<text>@inputString.StringValue</text>, true );
                }
                @foreach (var inputFile in input.Files)
                {
                    AccordionRow(inputFile.Name, @<img src="/images/@inputFile.Input/@inputFile.Index"/>, true);
                }
            </div>
        </div>
    }
}
<style>
    html {
        overflow-y: scroll;
    }
</style>

<div class="container mx-auto px-2 py-4">
    <div class="flex justify-between items-center mb-4 @executionBgColor p-2 rounded">
        <h1 class="text-xl font-bold">@Model.Execution.Name</h1>
        <span class="text-sm text-gray-600">Started: @Model.Execution.StartTime.ToString("yyyy-MM-dd HH:mm:ss")</span>
    </div>

    @foreach (var output in Model.Execution.Outputs)
    {
        <div class="bg-white shadow rounded-md mb-12 overflow-hidden @(output.Status == ExecutionStatus.Failed ? "bg-red-100" : "")">
            @if (output.Status == ExecutionStatus.Started)
            {
            <div class="flex items-center justify-center py-4">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
            </div>
            }
            else
            {
                EmitOutput(Model.Execution.Name, output, true, true);
                foreach (var referenceExecution in Model.AllReferences)
                {
                    Output? o = Model.FindOutput(referenceExecution, output);
                    if (o != null)
                        EmitOutput(referenceExecution.Name, o, true, false);
                }
                EmitInput(output.Input);
            }
    </div>
    }
</div>

<script>
    function toggleAccordion(button) {
        const content = button.nextElementSibling;
        const icon = button.querySelector('svg');
        content.classList.toggle('hidden');
        icon.classList.toggle('rotate-180');
    }
</script>
